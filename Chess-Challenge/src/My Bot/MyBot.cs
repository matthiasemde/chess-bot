#define DEBUG_LEVEL_1
// #define DEBUG_LEVEL_2
// #define DEBUG_LEVEL_3

using System;
using System.Diagnostics;
using System.Linq;
using ChessChallenge.API;
using Microsoft.CodeAnalysis;

public class MyBot : IChessBot
{
    // Encoded weights
    readonly decimal[] weights = {
933304973346051706920829956m,5280630611804656921660693515m,2196684918323051599880331283m,6820792679560835318367521053m,
3111850820683268214397732097m,932096047741145331795562243m,2170006240768595535515543291m,12684078330478491381817808898m,
4661618590147300359534022411m,7139948872999349059513606165m,4313447214572030736976371720m,70236205526876949299862378239m,
4637472668428385254257521652m,8984850412454945576221275392m,76446471832472160997730418676m,1550914951293897733882255871m,
2781672328371438135373136641m,75878215177655690083057867261m,75256987792379231382652782865m,19203781753597960467662568467m,
8651148760714652985620828418m,3410431887017335169311890465m,78603148714215947719314565882m,1226979204087347373380138218m,
4940813952591439471099974384m,77990175270841438600132498689m,78332258276854563645213367047m,76436842559707192836098225681m,
3684900473850408159779877875m,69942483352448526839968955123m,77374959642441333828193615361m,17088204186229062409437841670m,
932096029796608700288533507m,1248872465917395465948103423m,4042771091689649186494290694m,326528233732501009637574948m,
308346938162738076670626054m,932096047953736858943879426m,13656011558221173289393918989m,76440394053782049511592293640m,
7132596258193681256742195725m,2154306125658584703656798218m,2471048526099088036188511977m,2441738591236443870271273m,
2768407384093961653673133568m,4963854361016553993921361915m,38671387070612447125113848m,62219856174611761839424397361m,
5900800075778723027502562561m,3770719857932644762877102116m,17043399019110239506317906965m,76139427992624568461333437966m,
6240347761928086285949003072m,2162867864931994122017902595m,3092470450001027774310257164m,12044636722565688971413094941m,
951443526573841434951687415m,72398916467385700683707448296m,1853164871894168878465216504m,14562810663543620126499209971m,
25419981617676523747877928m,68697162382322418128703265010m,2185762084205653850842137360m,4962678434979225554446579460m,
622611037988804466124784387m,626261556694374598819776519m,78309388373059110843359691526m,928478678190509456523002375m,
3631592276067627101915911m,930887103973028119417519874m,1889518110082693069789922283m,290076323734032233129247490m,
71193740595070651802101287157m,5585341307088282890498864105m,281660217832658804557873150m,6821864324640371137069185552m,
2155467382649697601887279113m,2795060514126123175032523027m,5899563275051343059911968255m,2148308665386139096531794967m,
4030568515647089831089668360m,76454867643645453084871233287m,77981769421602552417572421900m,77064180354149577261081493496m,
4927610177356223948411761665m,78014448475828019918457214476m,2485523467060124070488190235m,5920284873566701256182734365m,
8072111535460008315477568290m,1274350299193747413211218969m,11203290575930473205338810395m,3703006342125426970983069971m,
7140001152584709277294658829m,78623728087314696095929270278m,6824457364649766390793766412m,5273405556164453095470469911m,
1241581148633744356826874371m,74277644412785875108140675319m,74272723282349908750996663548m,73323773403640761837140964590m,
61259841057181995550177753595m,930887118019713498806618883m,70554214294697032508856659960m,76088534215403498307737021425m,
1293554867285409081325062104m,1199188278741690337026898175m,74251005506282152768807115008m,70867155690417195871146010109m,
68381566942585319871407834097m,71488500636263294847829277170m,65245518310708338555394907626m,77042263534530602913755496942m,
71447345856777824979740979172m,68676525344716308725540447723m,66820899804343793057457760233m,74236403800738702754834340346m,
68691008732614704442867566061m,71474036194757463598731235557m,1488131382462249378496178399m,77946582717234250425444270070m,
74849140372577215995661832434m,62207733603963291327289284337m,76417419096788768242520807420m,4052385664331632814884394500m,
1557172309255970727370623236m,3104559285002655000410392485m,4043937626968785932514168337m,3423739644895864063594666250m,
932157770321399544688018179m,71469271696198798122769377516m,75187833051415694468305384696m,75503461676069893217138634488m,
68072123901985928288182594298m,1241581076005300327321436931m,4969908008981288902814264562m,74900230897008769280561840357m,
73616253173197914207420024051m,78008336973953929162134190095m,78919871891994492755102003488m,72733817548606418243467338497m,
69582110099354983723874184443m,77957520012932426517625775388m,73639289502219117056822008824m,66558629109441760231044352785m,
73312700096769522461340794873m,62471123114930000873194251746m,70508057204614719973094784493m,76433059923549008729717271270m,
63071992598849880257138653395m,75789887628038929810606054895m,74564179055566496830101844472m,68102337251603826067916713971m,
68377954242935789460476052992m,928331802978996224769718268m,67786850779729117824729997548m,2481977244213834870539557389m,
1241633206136219888626698773m,943009548371255765378731537m,4053599109241299323908195851m,3730825563199108304214235663m,
932167012652464926491869955m,76471788051800681827791276047m,1557120307307111845596299526m,78910200912594440137246049286m,
4864129928102097766188547m,932096065754196870865027843m,6495543744891744983972906744m,1546249050940899913407662596m,
15716111816223290911750143m,1563188363987187796831565820m,7126613172111117542208242951m,68075869421782093758348920566m,
4940988310713462432192728566m,1572831620518776439555297040m,955108214267276825891902725m,72687859367173927032378959086m,
2785435629029123039169281801m,77079892200878478458695583732m,78302172503749699949984612100m,2162720883229504321175489785m,
5881443076262431716661786060m,75525204044686644259009921538m,6175335220273723314319725586m,6837793604297709096521502492m,
1894467168265972021078399509m,4344979063458886441697221955m,72458324908945591274997154328m,5511601555686069402472346083m,
3106958448790861205949713928m,2179769125453614878681071631m,8050298425243600260038793493m,3409208682268581331572559891m,
1258576891568890397178659587m,2780605275451685968299493896m,8995688081478147888940455440m,2795079217898511297294239754m,
3415272404246404222113154828m,1241581040990412501168620291m,61887368318561716906458744818m,633491573568882756001596932m,
9597699807314459388602877188m,78927149688674913106214721543m,310665934271022787795023877m,2195423769258942645952381956m,
6212727248889415639595677964m,10864635341241499488642725130m,7118174336503303120235599620m,1242936653444857345325860349m,
1230715114506018998406284276m,4046298459713054203755893004m,4963949176125896505337383937m,2798677401819797065673935106m,
1843611912168356199349682194m,2796254753452573108803470596m,18922191727281360646369379836m,615258311861190723604708348m,
4633784110443198137102567925m,323939988513381857209610749m,67768707373693150699750039814m,3103402175800347843027799053m,
313126229422350504824664095m,5581709863110402968569650188m,78311868573535580721821317617m,73651335706505249706771215102m,
950220214174646385313513987m,1252466186814235797193098498m,1233128040073342429720020494m,1554711937510237664366887435m,
78918653892829857126418088202m,1241581040341314690791769092m,76758355472641008355840043517m,1838786412172594983638601472m,
5542948273839180730752568573m,4006398833872759635576876034m,75224185755899787898420258055m,1869013799120995052196722181m,
8969020841126825355012013820m,317994511020220972788813571m,2463885435090429823083349746m,1258425498485274085832458240m,
78279127522638619413423064838m,322811677921709789710785287m,5226223819705879833165232891m,2206422198268356910659076094m,
4017232127990307849629664507m,2792618736047369406594152469m,1212443576882749953840058654m,3397109962904708347183038472m,
2180897621807238896551272187m,77367531286102759208085878010m,77980546732431732386641282533m,6189719123003608700286994447m,
75192792626605316989312828405m,3078010175870711418579339780m,6793053294496670552765174281m,74903901136804581229423169786m,
1227078578145056535712302083m,7426473812056557196656707602m,78304581170357724908651546111m,314349176570872243654297095m,
78304548058164718922138781191m,932096029006215901832479491m,298586138751314513501807627m,2172401900685062083496116219m,
11145101336753816291296147966m,78300859649990077919463605758m,79205178775904492864979799281m,7748020206827577157214995975m,
1546197196784693021383990781m,77056969594523243195137984773m,77069035093673030088175126277m,2188179401108653984465681666m,
75548234765681161509558027522m,1856867650295505693299635972m,3094897617458242076674955507m,75808135203477703021008256765m,
3416348790284131098183858943m,1239134799013809581891584769m,6524572483519754663241521157m,78317798814812507386391363067m,
930863142446528275362676489m,79217272608317843337375972871m,3430922159594744458543824362m,1193228654766307282379667973m,
78609216125265318201924712949m,1253656020105955475248776969m,6831625917539339710509484334m,2492862004318133572965502210m,
23857027440683452463625470724m,77374907549195504391521766396m,3093664840430057760170703872m,78912623337944190056765783554m,
78600730013305064073264821486m,932096011418817113880724227m,4651956054889299235004024064m,76447666056663451909979308797m,
3070662081889273741406827786m,77687958166136455863498637810m,77078753741040796596358348557m,2171188344947438210124219395m,
2478264928552497489929174798m,309522604429318418710987523m,2792599698935130858879190264m,1217378892223934486391160055m,
77667396429503152381579495942m,3607888136467958653846521m,77674697633432622715666431216m,77996342791138337985812827383m,
79219695274122389363145702640m,77372093073035867485200447231m,77691901214534507495402961137m,1859346800677809971177914887m,
2796235957805665450507175677m,1234322744605070669343360244m,920002180809671742519577341m,3416471701662182152658814210m,
2170055197851743372685806857m,7120644081000448979654940414m,77698867072949359150955365139m,74898768384877010860930497533m,
76737765752215047761201202187m,2475927358660074103051257602m,1558328957434384824131716874m,8371830541075322722278572551m,
1258477666748961197134710030m,932091472443974351872852994m,3699308468607969439081425170m,3111775484257029242659478776m,
6507657408566058099635916565m,3721177878792525897476998705m,15778942890129212042276238339m,3116709618063416388869295882m,
2780586163399272522918264841m,308267229493644572107276553m,3098500615912184836772528877m,4337550283134512766981704188m,
76446542522121176867164916489m,2807177864914016633035099154m,13315085183025373853836576249m,75531343727765809928247838973m,
5563491084910470211891888377m,4338886619744644394254207243m,77677436550945471494680280293m,5880394654479024771070359562m,
77049612076065718726730516240m,2189459569123872217770948626m,2469835319691060566449132313m,2785251585148017662699373055m,
76764390585301200073474056180m,73031232909197979743716701434m,76758350292409309563327479543m,5584085916951008635193529599m,
5577974287185953795613066476m,78926001968861357203666371843m,314386790420194647927494925m,2480767784014822463631263749m,
2176095160354502817922942982m,932096046727047022918107907m,77417130816994468132313101553m,3700602216374186472504628225m,
11147504927401434934190863352m,78924684464294965464696556284m,75517954969941365373313746442m,1859303930238016269936624900m,
5302329885287334414678225128m,78917469262374500306622613501m,2479606101389033168307613988m,7118221616295093104784247048m,
4023281626451508111628567773m,77709770520035238749691248139m,8374172300907151462542155825m,1861689002161611236204021776m,
3740398242341829312085033228m,611688517258102934561950462m,66818557590417418038394494966m,1555835490642291113906604813m,
76787294300314754592361479179m,76453738834550321723174155778m,6192136789952471298850618879m,4641018739942731781388374791m,
5269731316458372499420606200m,77675855202586731801431175169m,9007696746061932145967763707m,74907886722014427855606186236m,
1225837093821870334219125763m,1867804613961304527306425860m,1244017762420473487027339785m,936941214269441582611955973m,
939349584497551878440485378m,934494974025584188808430339m,2161559845301919301496995589m,77070291280414351296476941571m,
319184787688792760502257927m,78293729299940172801847130624m,10866221192081688425071873m,934476157914003043998826246m,
78618892290647051414760518147m,1231876686383478721224834310m,79228157865972785383127513599m,4835668183328293480497147m,
78910172652185048090990213651m,310717584291992048746363907m,4030587053401304506277430790m,2510938946726481697263319550m,
78298507985411307212076809739m,1555930178286241208911331845m,78611671663528389421417568765m,1861816689937494558510285829m,
78606765493545981948738404101m,16991222470654112925285892m,2180893029506952798685759502m,6213855451403998557599762202m,
3106977634629382258883572741m,4655573424004834148552737297m,16929813329721050613683465m,1557138754407538364901162235m,
76447632944900269173626833163m,77677124947031655804857416447m,310708066423096163994502142m,305886566417288708604821503m,
1237930631590297147040400897m,932129104372718171133772803m,930839879806351487260627445m,77990245976351018465934180356m,
304668307049009743528987895m,79228157718188840426309288196m,2432000004555521740045577m,76428332873106374852636964349m,
305862917692230637822477311m,1547401455650398222852421890m,78609230218430011751092258299m,6044499833773122125627640m,
79225739940114510268950576108m,78916259579306711703774690297m,77061753222786165356041995774m,78915097581857937277843077889m,
78601924625247019323491158778m,2432130351952589891042815m,1224603872630368465763760137m,75815378963317557259235097088m,
75832275626554213200935385854m,2794994030037223097719847940m,75515541858541729223156171519m,614143428769824374549118974m,
77685554186737828497742365694m,2172439699079515604052019962m,3133620783328606790418365455m,3409256073101416314372884484m,
2790224643527671955891951893m,1242789965293439960238785541m,313126065132444396500156931m,2170036050850562207694062340m,
929697048958975638929277697m,1241585760037743549265150979m,78327593040506674164363624220m,9602498246007592683143168003m,
78296104374513542119313506567m,78609201902316448005153160961m,310679694321907754737334024m,78931971113450896999089765928m,
78610401383692733628166700552m,77993853919105449418708288513m,77990213030534504517076844801m,77986595697668450842664961282m,
78009551083954892812710444031m,78299707466210569008327819265m,9901083757500363733074837495m,3123963266367754876483665408m,
78916231373945656843025451771m,18294557425732164134042881m,74577358753905669524523182843m,75203596329763222847721895407m,
73951139698364401867846644980m,75195105459342675794914833908m,75189079719562467350657363700m,3708984173907013672662140163m,
1859616030551781361691394823m,605706166027869566326210884m,8144542617480895068971218940m,76491220608680500281074712317m,
926037122773650739752925186m,2170036069081414974283646213m,1241590521099439208002748931m,1864182577604763475123569413m,
1551066104491289640387674884m,935732307832198230599467779m,10860994396971166918639224834m,2180911679236151813813503496m,
1861793060092936812170119179m,1869056189016038822340199944m,2483190412858041527032874242m,8500296346489548503188737m,
3414030200789264029748365320m,933333437606362984300742417m,4026960368896753633004423432m,634705055663915942591989513m,
4030582276559562018549922822m,628688761483346721154533388m,2792642440331636231041978629m,313145139571069701721885737m,
2491634171591270883028632835m,1250081337260898291338708743m,5903246538179523851613507083m,6223640196199927968993317401m,
5590163140726408841855569726m,6209142401828144979284136723m,4977256676470554642925687324m,2187046328802496390497503492m,
4338858489689625765888133894m,305952605835734024057917956m,2147123165281773197356265735m,8061108123084189279063116337m,
626228297143881300724220674m,1241585779925639482007093254m,314320823854581858318025727m,1245222002334464138551820548m,
932100788695152605888840708m,1236759503221915603238585091m,1873849132521352741752930543m,3719879007078896075995807497m,
1862973873000838862643724042m,78003511418115788872517682943m,311874600835297661113992972m,17080688240402242211807732m,
78918686783587315815626900745m,78308188911139501536197607418m,934457230904650025777364996m,926075068086786398224449797m,
78624884900071502747210678012m,1841194060526866276272180480m,1248848761924726778751290367m,78616465069072043078817743895m,
1245240965587938198929606652m,2172458698716157077640251143m,1547330455139588140744901890m,2178522253599160525970215943m,
2174815067429997085462954763m,1564369103899919279752937750m,322783508153736397603211530m,1574059398260610680696992755m,
76735333769933005587198899965m,76735328881908936432303934730m,39308241840749263397149607946m,3410347234690410081996181009m,
3725970822374098640696509199m,932096011133407058069161223m,313130713642428842509797125m,315553269487940622092599810m,
626223556473076271701819904m,78298498485410731981887701764m,77999907993943900474187118591m,79225735365611336265124674312m,
2168841347039687964550039040m,77996253046869632727721640697m,923572527369229604648515073m,9284578591515106616717015536m,
3683483253969947484685569m,311898194432918524055256583m,3092441820579361937163813122m,77984191957569455843226681352m,
77990232288864101023780110345m,2413129561253867589075462m,78917497041590044460979910657m,1542584659991879117917123580m,
79220885494438242569137684219m,1252432908018437427929480703m,78276813082505134651810836987m,77674659577370918855771222777m,
76142964656655184288143636231m,74897709856082660264079853059m,72726478825046300975945806582m,68367201155775773672221509128m,
1242799428111459977280427773m,3417700199622232958161977356m,7087960931185431808947326993m,1563197938638303541441988094m,
4041448828856573084530576131m,932096047664904027378286852m,78917482709046359962318733062m,3640963292987661777699843m,
78915060226695367587230779386m,79214817143693975162831701246m,2799985608086632580855818749m,2781747700683461911117102061m,
78918687022744792534311960574m,72100340419065303505480383736m,75816469939576933774232974328m,2811918475580302227938609154m,
79220885236833209108868300027m,77980536919910349224317616641m,267205403795853897916480495m,71169448906456385459833929980m,
78930757335341851368107407857m,300998823719177955530966014m,611688148614246799207758592m,71180352722334971960828956914m,
77992631029457201990095993079m,75185500165192581793217969407m,2769615939965368291609471718m,67132793463693847451794210543m,
65245668837292837702503034098m,69910974929495901771810600681m,73951134792173365948370647033m,64647260537647193880680006138m,
1549895012440776600782636033m,1864163669764145530058903305m,3417671311152074961579214348m,629888316790449936932475400m,
2797473365398413462948547335m,932100770034505103427240195m,621373741580926150619628287m,322797379529109315921379077m,
1234308613751432983685038337m,78918701393265646086928925691m,76441602739717180266306210034m,2782989904217444733369191927m,
628660316752317988456432138m,78928353689499827704761616129m,78307031838393535481264015364m,3411640720172052492107182322m,
78618821234438808535174677507m,1864201650960826098424549372m,12079850865576553002170892m,77065399000536931068579415293m,
632296611933115672007406334m,933295639937840017311991815m,3414053960414617460250577668m,1860593616327613597536880398m,
78615265734473419681453048322m,628674668172282864121415432m,11476484034245664684178215713m,4359476453157409445420535574m,
10527359648910868743035231520m,5913021854529470811180901657m,5611763264267720799899424289m,350645728438382647408918559m,
1239181874386911170654175235m,317990085104598637649595142m,1576515012404577072363279903m,944222993282886028176852488m,
3387452799028059542821797899m,8687491225591715275516341273m,
    };
    readonly double scaling_factor = 19.3;
    readonly double shift = -0.16169999999999973;

    #if DEBUG_LEVEL_1
        public MyBot()
        {
            Console.WriteLine("MyBot loaded!");

            // test FENs
            string[] testFENs = {
                "r1b1r1k1/5q1p/p1p2p1b/3pn2N/6p1/4B1N1/PPP2PPP/R2QR1K1 b - - 11 24",
                "rn1q2k1/ppp2pb1/3p2pB/8/2P1r1b1/5N2/PP1Q1PPP/2KR1B1R w - - 1 13",
                "r4rk1/1pp2pp1/p2b1q1p/2p1P3/6b1/2NP1N2/PPP2PPP/R2QR1K1 b - - 0 13",
                "2rn1r2/pP1q2bk/3pbppn/1p2p2p/2P1N2P/3PP1P1/4NPB1/1RBQK2R b K - 0 18",
                "6k1/5pp1/8/1p1q3P/3q2K1/8/5P2/8 w - - 3 44",
                "rnbqkbnr/ppp2ppp/8/3pp3/6B1/4P3/PPPP1PPP/RNBQK1NR b KQkq - 1 3",
                "3N1k2/7R/6p1/7p/3PpP2/4P1P1/3K4/6n1 b - - 4 45",
                "3qr1k1/p4ppp/b1p1p3/3Pn3/Prp1P3/4N1P1/2Q2PBP/3RR1K1 w - - 1 24",
                "1k1r1b1r/p1p2ppp/1pqp4/4pPP1/4P3/2PPQN2/PP1N2P1/R3K2R b KQ - 1 16",
                "2kr1b1r/ppp2ppp/2n5/4P3/8/2N3P1/PPPP3P/R1B1K2R b KQ - 2 12",
                "r2q1rk1/1b2bppp/p3pn2/np4B1/3P3Q/2N2N2/PPB2PPP/R4RK1 b - - 3 14",
            };

            ChessChallenge.Chess.Board testBoard = new ();
            foreach(string testFEN in testFENs)
            {
                testBoard.LoadPosition(testFEN);
                Console.WriteLine(
                    ("Eval of Test FEN (" + testFEN + "):").PadRight(90) +
                    Evaluate(new Board(testBoard)));
            }
        }
    #endif

    public Move Think(Board board, Timer timer)
    {
        Move[] moves = board.GetLegalMoves();

        double[] evaluations = new double[moves.Length];

        // evaluate each move
        for (int i = 0; i < moves.Length; i++)
        {
            #if DEBUG_LEVEL_1
                Console.WriteLine("\n-----------------------\n" + moves[i].ToString());
            #endif

            // make move
            board.MakeMove(moves[i]);

            // evaluate board
            evaluations[i] = Evaluate(board);

            #if DEBUG_LEVEL_1
                Console.WriteLine("\nEval: " + evaluations[i]);
            #endif

            // undo move
            board.UndoMove(moves[i]);
        }

        // find best move
        return moves[evaluations.ToList().IndexOf(evaluations.Max())];
    }

    private unsafe double Evaluate(Board board)
    {
        // load board state
        ulong[] boardState = board.GetAllPieceLists().Select(pieceList =>
            board.GetPieceBitboard(
                pieceList.TypeOfPieceInList,
                pieceList.IsWhitePieceList ^ board.IsWhiteToMove // invert board if bot plays black (white to move)
            )
        ).ToArray();

        // create network
        int[] layers = {768, 10, 1}; // optimize later
        double[] neurons = new double[11]; // optimize later

        #if DEBUG_LEVEL_1
            int networkConnections = 0;
            for(int i = 1; i < layers.Length; i++)
            {
                networkConnections += layers[i-1] * layers[i];
            }
            Debug.Assert(weights.Length * 12 >= networkConnections, "Number of weights (" + weights.Length * 12 + ") needs to be larger than the number of network connections (" + networkConnections +")!");
        #endif

        #if DEBUG_LEVEL_2
            Console.WriteLine("\nBoard state:\n");
            Console.WriteLine("FEN: " + board.GetFenString() + "\n");
            Console.WriteLine("Binary: ");
            for (int s = 0; s < 768; s++)
            {
                Console.Write(boardState[s / 64] >> (s % 64) & 1);
                if ((s + 1) % 8 == 0) Console.Write(" ");
                if ((s + 1) % 64 == 0) Console.WriteLine();
            }
        #endif

        // compute feed forward
        #if DEBUG_LEVEL_3
            Console.WriteLine("\nNeurons:\n");
        #endif

        fixed (double * neuron_po = neurons)
        {
            fixed(decimal * weight_po = weights)
            {
                double * input_p = neuron_po;
                double * output_p = neuron_po;
                sbyte * weight_p = (sbyte *) weight_po;

                // loop through layers
                for (int l = 1; l < layers.Length; l++)
                {
                    // loop through neurons
                    for(int n = 0; n < layers[l]; n++)
                    {
                        // loop through inputs
                        for(int i = 0; i <= layers[l - 1]; i++)
                        {
                            // skip 4 bytes at the beginning of each group of 16 weights (one decimal)
                            if ((weight_p - (sbyte*) weight_po) % 16 == 0) weight_p += 4;

                            // compute weighted sum
                            *output_p +=
                                (i == layers[l - 1]
                                    ? 1
                                    : l == 1
                                        ? (boardState[i / 64] >> (i % 64) & 1) // for the first layer, use the board state as input
                                        : *input_p++
                                ) *
                                (((double) *weight_p++) / scaling_factor + shift); // decode sbyte [-128, 127] to double [-2.0, 2.0]

                            #if DEBUG_LEVEL_3
                                input_p--; weight_p--; // undo increment temporarily
                                double input =
                                    i == layers[l - 1]
                                        ? 1
                                        : l == 1
                                            ? (boardState[i / 64] >> (i % 64) & 1)
                                            : *input_p;
                                Console.WriteLine(
                                    Math.Round(input, 2).ToString().PadRight(8) + "("+ (l == 1 ? i : input_p - neuron_po) +") * " +
                                    Math.Round(((double) *weight_p) / scaling_factor + shift, 2).ToString().PadRight(8) + "(" + (weight_p - (sbyte*) weight_po) + ") -> " +
                                    Math.Round(*output_p, 2).ToString().PadRight(8) + "(" + (output_p - neuron_po) + ")"
                                );
                                input_p++; weight_p++; // redo increment
                            #endif
                        }

                        // apply ReLU activation function except for the last layer
                        *output_p *= Convert.ToDouble(*output_p > 0 || l == layers.Length - 1);

                        // increment/reset pointers
                        output_p++;
                        input_p -= l > 1 ? layers[l - 1] : 0;
                    }
                }
            }
        }

        // return value of output neuron
        return neurons[^1];
    }
}
